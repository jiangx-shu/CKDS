options(CRAN="http://cran.r-project.org");
install.packages("ggplot2")
ss
library(ggplot2);
source("http://bioconductor.org/biocLite.R");
biocLite();
biocLite("knitr");
install.packages("maps");
install.packages("XML");
install.packages("ggmap");
install.packages('ggplot2');
install.packages("ggplot2")
install.packages('mapproj');
install.packages("rattle")
library(rattle)
library (rattle)
install.packages("devtools")
require(devtools)
install_github('rCharts','ramnathv')
library(rCharts)
install.packages("rattle")
library (rattle)
library(rattle)
rattle()
x <-c(1,2,3,4)
x
c(1,2,3,4)+c(3,4,5,6)
c("hello world","I am a r user")
exp(0)
install.packages(igraph)
install.packages("igraph")
library(igraph)
g<-barabasi.game(100,m=1)
plot(g,)
plot(g,vertex.size=4)
install.packages("quantmod")
install.packages("scales")
source("http://bioconductor.org/biocLite.R")ï¼›
source("http://bioconductor.org/biocLite.R");
biocLite("Biostrings");
biocLite("ape");
library("Biostrings")
install.packages('seqinr');
install.packages('ape');
library('seqinr')
library('ape')
source("http://bioconductor.org/biocLite.R");
biocLite("Biostrings");
biocLite("BSgenome.Hsapiens.UCSC.hg19");
biocLite("BSgenome.Hsapiens.UCSC.hg19");
biocLite("hgu133a2probe");
source("http://bioconductor.org/biocLite.R");
biocLite("CLL");
biocLite("biomaRt");
biocLite("AnnotationDbi");
biocLite("AnnotationForge");
library(CLL);
data("CLLbatch");
CLLrma<-rma(CLLbatch);
e<-exprs(CLLrma);
e[1:5,1:5]
library(CLL);
data.class(CLLbatch);
data("disease");
disease;
help("AffyBatch");
image(CLLbatch[,1]);
source("http://bioconductor.org/biocLite.R");
biocLite("simpleaffy");
biocLite("affyPLM");
biocLite("RColorBrewer");
biocLite("affy");
biocLite("gcrma");
biocLite("graph");
biocLite("affycoretools");
library(affyPLM);
library(affy);
library(gcrma);
library(affyPLM);
library(RColorBrewer);
library(CLL);
data("CLLbatch")
colors<-brewer.pal(12,"Set3");
CLLrma5<-mas5(CLLbatch);
CLLgcrma<-gcrma(CLLbatch);
hist(CLLbatch,main="original",col=colors);
biocLite("limma");
biocLite("hgu95av2");
library(annotate);
library(XML);
library(GOstats);
biocLite("GOstats");
biocLite("GeneAnswers");
biocLite("pheatmap");
biocLite("Rgraphviz");
biocLite("GEOquery");
biocLite("Biostrings");
biocLite("biomaRt");
biocLite("genefilter");
biocLite("annotate");
biocLite("GOstats");
biocLite("annoPackage");
biocLite("ShortRead");
biocLite("SRAdb");
biocLite("R.utils");
biocLite("Rsamtools");
biocLite("DESeq");
biocLite("edgeR");
source("http://Bioconductor.org/biocLite.R")
#biocLite("igraph")
library(igraph)
library(ggplot2)
dictionary = "/Users/jiaminsun/expsjm//bio/data/GBM_three_groups/aNSC_NPC"
setwd(dictionary)
# read table
gene_npc_nsc1 = read.table("minus_sub_KDSMP_aNSC_NPC.txt",header = T)
g_npc_nsc1 = data.frame(id1=gene_npc_nsc1$Id1,id2=gene_npc_nsc1$Id2)
g = graph_from_data_frame(g_npc_nsc1, directed=FALSE)
# read table
gene_npc_nsc1 = read.table("minus_sub_KDSMP_aNSC_NPC.txt",header = T)
g_npc_nsc1 = data.frame(id1=gene_npc_nsc1$Id1,id2=gene_npc_nsc1$Id2)
g = graph_from_data_frame(g_npc_nsc1, directed=FALSE)
V(g)$size=10
plot(g)
# sorted by g
degree_g=sort(degree(g),decreasing=T)
closeness_g=sort(closeness(g),decreasing=T)
betweenness_g=sort(betweenness(g),decreasing=T)
vector_g=sort(evcent(g,scale = F)$vector,decreasing=T)
# max of four standards
max_d=max(degree_g)
max_c=max(closeness_g)
max_b=max(betweenness_g)
max_v=max(vector_g)
for(i in 1:length(degree_g)){
degree_g[i]=degree_g[i]/maxd
}
for(i in 1:length(closeness_g)){
closeness_g[i]=closeness_g[i]/maxc
}
for(i in 1:length(degree_g)){
degree_g[i]=degree_g[i]/max_d
}
for(i in 1:length(closeness_g)){
closeness_g[i]=closeness_g[i]/max_c
}
for(i in 1:length(betweenness_g)){
betweenness_g[i]=betweenness_g[i]/max_b
}
for(i in 1:length(vector_g)){
vector_g[i]=vector_g[i]/max_v
}
write.table(degree_g,quote=FALSE,col.names = FALSE,'aNSC_NPC_degree.txt')
write.table(closeness_g,quote=FALSE,col.names = FALSE,'aNSC_NPC_closeness.txt')
write.table(betweenness_g,quote=FALSE,col.names = FALSE,'aNSC_NPC_betweenness.txt')
write.table(vector_g,quote=FALSE,col.names = FALSE,'aNSC_NPC_vector.txt')
dictionary = "/Users/jiaminsun/expsjm/bio/data/GBM_three_groups/Ast_NPC"
setwd(dictionary)
# read table
gene_npc_nsc1 = read.table("minus_sub_KDSMP_Ast_NPC.txt",header = T)
g_npc_nsc1 = data.frame(id1=gene_npc_nsc1$Id1,id2=gene_npc_nsc1$Id2)
g = graph_from_data_frame(g_npc_nsc1, directed=FALSE)
g_npc_nsc1 = data.frame(id1=gene_npc_nsc1$Id1,id2=gene_npc_nsc1$Id2)
g = graph_from_data_frame(g_npc_nsc1, directed=FALSE)
# read table
gene_npc_nsc1 = read.table("minus_sub_KDSMP_Ast_NPC.txt",header = T)
g_npc_nsc1 = data.frame(id1=gene_npc_nsc1$Id1,id2=gene_npc_nsc1$Id2)
g = graph_from_data_frame(g_npc_nsc1, directed=FALSE)
V(g)$size=10
plot(g)
# sorted by g
degree_g=sort(degree(g),decreasing=T)
closeness_g=sort(closeness(g),decreasing=T)
betweenness_g=sort(betweenness(g),decreasing=T)
vector_g=sort(evcent(g,scale = F)$vector,decreasing=T)
# max of four standards
max_d=max(degree_g)
max_c=max(closeness_g)
max_b=max(betweenness_g)
max_v=max(vector_g)
for(i in 1:length(degree_g)){
degree_g[i]=degree_g[i]/max_d
}
for(i in 1:length(closeness_g)){
closeness_g[i]=closeness_g[i]/max_c
}
for(i in 1:length(betweenness_g)){
betweenness_g[i]=betweenness_g[i]/max_b
}
for(i in 1:length(vector_g)){
vector_g[i]=vector_g[i]/max_v
}
write.table(degree_g,quote=FALSE,col.names = FALSE,'Ast_NPC_degree.txt')
write.table(closeness_g,quote=FALSE,col.names = FALSE,'Ast_NPC_closeness.txt')
write.table(betweenness_g,quote=FALSE,col.names = FALSE,'Ast_NPC_betweenness.txt')
write.table(vector_g,quote=FALSE,col.names = FALSE,'Ast_NPC_vector.txt')
dictionary = "/Users/jiaminsun/expsjm/bio/data/GBM_three_groups/GBM"
setwd(dictionary)
# read table
gene_npc_nsc1 = read.table("KDSMP_newgraph1",header = T)
dictionary = "/Users/jiaminsun/expsjm/bio/data/GBM_three_groups/GBM"
setwd(dictionary)
# read table
gene_npc_nsc1 = read.table("KDSMP_newgraph1",header = T)
# read table
gene_npc_nsc1 = read.table("KDSMP_newgraph1",header = T)
dictionary = "/Users/jiaminsun/expsjm/bio/data/GBM_three_groups/GBM"
setwd(dictionary)
# read table
gene_npc_nsc1 = read.table("minus_sub_KDSMP.txt",header = T)
g_npc_nsc1 = data.frame(id1=gene_npc_nsc1$Id1,id2=gene_npc_nsc1$Id2)
g = graph_from_data_frame(g_npc_nsc1, directed=FALSE)
V(g)$size=10
plot(g)
# sorted by g
degree_g=sort(degree(g),decreasing=T)
closeness_g=sort(closeness(g),decreasing=T)
betweenness_g=sort(betweenness(g),decreasing=T)
vector_g=sort(evcent(g,scale = F)$vector,decreasing=T)
# max of four standards
max_d=max(degree_g)
max_c=max(closeness_g)
max_b=max(betweenness_g)
max_v=max(vector_g)
for(i in 1:length(degree_g)){
degree_g[i]=degree_g[i]/max_d
}
for(i in 1:length(closeness_g)){
closeness_g[i]=closeness_g[i]/max_c
}
for(i in 1:length(betweenness_g)){
betweenness_g[i]=betweenness_g[i]/max_b
}
for(i in 1:length(vector_g)){
vector_g[i]=vector_g[i]/max_v
}
write.table(degree_g,quote=FALSE,col.names = FALSE,'GBM_degree.txt')
write.table(closeness_g,quote=FALSE,col.names = FALSE,'GBM_closeness.txt')
write.table(betweenness_g,quote=FALSE,col.names = FALSE,'GBM_betweenness.txt')
write.table(vector_g,quote=FALSE,col.names = FALSE,'GBM_vector.txt')
